import{_ as a,o as n,c as i,a as l}from"./app-BeNqfQcy.js";const e={};function p(t,s){return n(),i("div",null,s[0]||(s[0]=[l(`<blockquote><p>进入正题，今天介绍一下objective-c中的枚举</p></blockquote><h3 id="提要" tabindex="-1"><a class="header-anchor" href="#提要"><span>提要</span></a></h3><ul><li><p>首先要知道的是,枚举值 它是一个整形(int) 并且,它不参加内存的占用和释放 枚举定义变量即可直接使用,不用初始化</p></li><li><p>三种类型的枚举</p><ul><li><strong>enum</strong> 在iOS6之前一般我们采用C风格的enum关键字可以定义枚举类型</li></ul><p>在iOS6之后引入两个宏来定义枚举实际上是将enum定义和typedef合二为一，并且采用不同的宏来从代码角度来区分。</p><ul><li><p><strong>NS_ENUM</strong> 普通枚举定义可参见UIKit.Framework中</p></li><li><p><strong>NS_OPTIONS</strong> 位运算及特殊枚举的定义。什么时候要用到这种方式呢? 那就是一个枚举变量可能要代表多个枚举值的时候. 其实给一个枚举变量赋予多个枚举值的时候,原理只是把各个枚举值加起来罢了. 当加起来以后,就获取了一个新的值,那么为了保证这个值的唯一性,这个时候就体现了位运算的重要作用. 位运算可以确保枚举值组合的唯一性. 因为位运算的计算方式是将二进制转换成十进制,也就是说,枚举值里面存取的是 计算后的十进制值. 打个比方: 通过上面的位运算方式设定好枚举以后,打印出来的枚举值分别是: 1 2 4 8 16 这5个数字,无论你如何组合在一起,也不会产生两个同样的数字.</p></li></ul><p>这两个宏的定义在Foundation.framework的NSObjCRuntime.h中：</p></li></ul><div class="language-objc" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  		#if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">__cplusplus</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> __cplusplus</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 201103</span><span style="color:#E06C75;--shiki-dark:#E06C75;">L</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">__has_extension</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">cxx_strong_enums</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">||</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> __has_feature</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">objc_fixed_enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">||</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">__cplusplus</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> __has_feature</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">objc_fixed_enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_ENUM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">_type, _name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _name : _type _name; </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _name : _type</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">__cplusplu</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_OPTIONS</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">_type, _name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) _type _name; </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : _type  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_OPTIONS</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">_type, _name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _name : _type _name; </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _name : _type  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#endif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_ENUM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">_type, _name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) _type _name; </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">				#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_OPTIONS</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">_type, _name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) _type _name; </span><span style="color:#C678DD;--shiki-dark:#C678DD;">enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		#endif</span></span></code></pre></div><h3 id="举个🌰" tabindex="-1"><a class="header-anchor" href="#举个🌰"><span>举个🌰</span></a></h3><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    //推荐的定义枚举类型的方式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    typedef</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_ENUM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSInteger, RWTLeftMenuTopItemType) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     RWTLeftMenuTopItemMain, </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     RWTLeftMenuTopItemShows,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     RWTLeftMenuTopItemSchedule </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }; </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    typedef</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_ENUM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSInteger, RWTGlobalConstants) { </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    RWTPinSizeMin </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    RWTPinSizeMax </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    RWTPinCountMin </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    RWTPinCountMax </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 500</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }; </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    typedef</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> NS_OPTIONS</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSInteger, Test) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    TestA </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">//1 1 1等于号后面必须等于1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    TestB </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">//2 2 10 转换成 10进制 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    TestC </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">//4 3 100 转换成 10进制 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    TestD </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">//8 4 1000 转换成 10进制 8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    TestE </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 4</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> //16 5 10000 转换成 10进制 16</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    //不推荐的方式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    enum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> GlobalConstants { </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    kMaxPinSize</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    kMaxPinCount</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 500</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    };</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>共同学习共同进步，加油。fighting😆</p></blockquote>`,7)]))}const r=a(e,[["render",p],["__file","iOS枚举类型enum，NS_ENUM，NS_OPTIONS.html.vue"]]),B=JSON.parse(`{"path":"/posts/iOS/system/iOS%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8Benum%EF%BC%8CNS_ENUM%EF%BC%8CNS_OPTIONS.html","title":"OC 中的枚举类型","lang":"zh-CN","frontmatter":{"title":"OC 中的枚举类型","date":"2017-01-06T11:19:16.000Z","category":["iOS"],"tag":["iOS","Objectiv-C语法"],"description":"进入正题，今天介绍一下objective-c中的枚举 提要 首先要知道的是,枚举值 它是一个整形(int) 并且,它不参加内存的占用和释放 枚举定义变量即可直接使用,不用初始化 三种类型的枚举 enum 在iOS6之前一般我们采用C风格的enum关键字可以定义枚举类型 在iOS6之后引入两个宏来定义枚举实际上是将enum定义和typedef合二为一，并...","head":[["meta",{"property":"og:url","content":"https://oragekk.me/posts/iOS/system/iOS%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8Benum%EF%BC%8CNS_ENUM%EF%BC%8CNS_OPTIONS.html"}],["meta",{"property":"og:site_name","content":"Oragekk's Blog"}],["meta",{"property":"og:title","content":"OC 中的枚举类型"}],["meta",{"property":"og:description","content":"进入正题，今天介绍一下objective-c中的枚举 提要 首先要知道的是,枚举值 它是一个整形(int) 并且,它不参加内存的占用和释放 枚举定义变量即可直接使用,不用初始化 三种类型的枚举 enum 在iOS6之前一般我们采用C风格的enum关键字可以定义枚举类型 在iOS6之后引入两个宏来定义枚举实际上是将enum定义和typedef合二为一，并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-10T06:30:41.000Z"}],["meta",{"property":"article:author","content":"Oragekk"}],["meta",{"property":"article:tag","content":"iOS"}],["meta",{"property":"article:tag","content":"Objectiv-C语法"}],["meta",{"property":"article:published_time","content":"2017-01-06T11:19:16.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-10T06:30:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OC 中的枚举类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-01-06T11:19:16.000Z\\",\\"dateModified\\":\\"2023-03-10T06:30:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oragekk\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":3,"title":"提要","slug":"提要","link":"#提要","children":[]},{"level":3,"title":"举个🌰","slug":"举个🌰","link":"#举个🌰","children":[]}],"git":{"createdTime":1678187456000,"updatedTime":1678429841000,"contributors":[{"name":"huangkun","email":"huangkun@tonshow.cn","commits":1}]},"readingTime":{"minutes":2.12,"words":636},"filePathRelative":"posts/iOS/system/iOS枚举类型enum，NS_ENUM，NS_OPTIONS.md","localizedDate":"2017年1月6日","excerpt":"<blockquote>\\n<p>进入正题，今天介绍一下objective-c中的枚举</p>\\n</blockquote>\\n<h3>提要</h3>\\n<ul>\\n<li>\\n<p>首先要知道的是,枚举值 它是一个整形(int) 并且,它不参加内存的占用和释放 枚举定义变量即可直接使用,不用初始化</p>\\n</li>\\n<li>\\n<p>三种类型的枚举</p>\\n<ul>\\n<li><strong>enum</strong> 在iOS6之前一般我们采用C风格的enum关键字可以定义枚举类型</li>\\n</ul>\\n<p>在iOS6之后引入两个宏来定义枚举实际上是将enum定义和typedef合二为一，并且采用不同的宏来从代码角度来区分。</p>\\n<ul>\\n<li>\\n<p><strong>NS_ENUM</strong>  普通枚举定义可参见UIKit.Framework中</p>\\n</li>\\n<li>\\n<p><strong>NS_OPTIONS</strong>  位运算及特殊枚举的定义。什么时候要用到这种方式呢? 那就是一个枚举变量可能要代表多个枚举值的时候. 其实给一个枚举变量赋予多个枚举值的时候,原理只是把各个枚举值加起来罢了. 当加起来以后,就获取了一个新的值,那么为了保证这个值的唯一性,这个时候就体现了位运算的重要作用. 位运算可以确保枚举值组合的唯一性. 因为位运算的计算方式是将二进制转换成十进制,也就是说,枚举值里面存取的是 计算后的十进制值. 打个比方: 通过上面的位运算方式设定好枚举以后,打印出来的枚举值分别是: 1 2 4 8 16 这5个数字,无论你如何组合在一起,也不会产生两个同样的数字.</p>\\n</li>\\n</ul>\\n<p>这两个宏的定义在Foundation.framework的NSObjCRuntime.h中：</p>\\n</li>\\n</ul>","autoDesc":true}`);export{r as comp,B as data};
