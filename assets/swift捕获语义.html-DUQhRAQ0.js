import{_ as a,o as n,c as i,a as l}from"./app-BiAi4BM5.js";const o={};function e(p,s){return n(),i("div",null,s[0]||(s[0]=[l(`<blockquote><p>参考链接：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgold.xitu.io%2Fentry%2F5796308479bc440066443c8e" target="_blank" rel="noopener noreferrer">losures Capture Semantics, Part 1: Catch them all!</a></p></blockquote><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>原文中先定义一个 Pokemon 类</p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Pokemon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">CustomDebugStringConvertible </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> name: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  init</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;font-style:italic;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> = name</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  var</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> debugDescription: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">name</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&gt;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  deinit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;"> escaped!&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>延时执行的闭包</p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">func</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> delay</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;font-style:italic;--shiki-dark-font-style:italic;">seconds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;font-style:italic;--shiki-dark-font-style:italic;">closure</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: ()-&gt;()) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> time = DispatchTime.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">now</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() + .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">seconds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(seconds)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  DispatchQueue.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">after</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">when</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: time) {</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;🕑&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    closure</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="默认捕捉语法" tabindex="-1"><a class="header-anchor" href="#默认捕捉语法"><span>默认捕捉语法</span></a></h2><p>在 swift 中默认的捕捉语法是:<strong>被捕获的变量在闭包被执行的时候才被定值</strong><a href="https://link.juejin.im/?target=http%3A%2F%2Falisoftware.github.io%2Fswift%2Fclosures%2F2016%2F07%2F25%2Fclosure-capture-1%2F%23fn%3Ablock-modifier" target="_blank" rel="noopener noreferrer">1</a><br> . 我们能说它捕获到了这个变量的<em>引用</em>(或者  <em>指针</em>)。</p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">func</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> demo1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> pokemon = </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Pokemon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Mewtwo&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;before closure: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">pokemon</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  delay</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;inside closure: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">pokemon</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;bye&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>这个闭包会在 demo1() 方法函数执行完成后 1 秒后被执行，并且我们已退出了方法函数的作用域… 当然 Pokemon 仍然是存在的，当这个代码块在下一个 1 秒后再次被执行的时候！</p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">before closure</span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> &lt;Pokemon Mewtwo&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">bye</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">🕑</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">inside closure</span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> &lt;Pokemon Mewtwo&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;Pokemon Mewtwo&gt; escaped!</span></span></code></pre></div><p>在这个例子中，当这个闭包被 GCD 执行后，这个闭包自行释放，就是 Pokemon 内部的 init 方法执行的时候。<br> 此处 Swift 自动捕获到这个 pokemon 变量，当 demo1 方法执行完成并且释放掉的时候，1s 之后闭包被执行的时候还是捕获到了 pokemon</p><h2 id="被捕获到的变量都被执行的时候定值" tabindex="-1"><a class="header-anchor" href="#被捕获到的变量都被执行的时候定值"><span>被捕获到的变量都被执行的时候定值</span></a></h2><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> name = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;John&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> test1 = {</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">name = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Aby&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">test1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><p>此处在创建了 test1 闭包之后，我们改变了 name 的值，打印结果是 Aby。说明此处 Swift 捕获到的是 name 这个变量的引用(指针)</p><p>原文中的例子使用了方法，并做了延时，大意在说明，函数被释放之后的延时闭包中，闭包依然捕获了变量的新值，而不是旧值，说明此处它捕获的是变量的引用，而非变量本身的值</p><p>这个在值类型中也可行例如 Int</p><h2 id="修改变量的值" tabindex="-1"><a class="header-anchor" href="#修改变量的值"><span>修改变量的值</span></a></h2><p>如果捕获的值是一个  var 并不是一个  let，你还是可以修改这个值  <strong>在闭包内部</strong><a href="https://link.juejin.im/?target=http%3A%2F%2Falisoftware.github.io%2Fswift%2Fclosures%2F2016%2F07%2F25%2Fclosure-capture-1%2F%23fn%3Aobjc_block_modify" target="_blank" rel="noopener noreferrer">2</a></p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> name = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;John&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> test1 = {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    name = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Jack&quot;</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">name = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Aby&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">test1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><p>此处打印结果为 Jack，再一次印证，闭包内捕获的是变量 name 的引用，因为它可以被改变，而不是一个静态的拷贝</p><h2 id="捕获一个作为静态-copy-的变量" tabindex="-1"><a class="header-anchor" href="#捕获一个作为静态-copy-的变量"><span>捕获一个作为静态 copy 的变量</span></a></h2><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> str = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello, playground&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> show1 = { [strcopy = str] </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 在闭包一开始创建的时候捕获变量的值，</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// []内的为捕获列表，一开始捕获值，而非引用。</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 捕获的为原始变量的副本-&gt;常量，并且只能在闭包内访问</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;这是str-----</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">str</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">\\n</span><span style="color:#98C379;--shiki-dark:#98C379;">这是strcopy-----</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">strcopy</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">str = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">show1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">这是str-----hello</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">这是strcopy-----Hello, playground</span></span></code></pre></div><p>如果你想要在闭包<strong>创建</strong>的时候捕获变量的值，而不是仅仅当闭包执行的时候去获取它的定值，你能使用一个<strong>捕获列表</strong>。<br><strong>捕获列表</strong>可以被编码在方括号的中间，在闭包开括号的右边（并且在闭包的参数 / 或者有返回值之前）<a href="https://link.juejin.im/?target=http%3A%2F%2Falisoftware.github.io%2Fswift%2Fclosures%2F2016%2F07%2F25%2Fclosure-capture-1%2F%23fn%3Ain-keyword" target="_blank" rel="noopener noreferrer">3</a><br> 。<br> 为了在闭包创建的时候，捕获变量的值（而不是这个变量本身的引用），你可以使用  [形参 = 实参]</p><p>你也可以这样写，不过我觉得不够清晰</p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> str = </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello, playground&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> show1 = { [str] </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(str)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>这里的捕获列表大概相当于文中的如下代码</p><div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">func</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> demo6_equivalent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  var</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> pokemon = </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Pokemon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Pikachu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;before closure: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">pokemon</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // here we create an intermediate variable to hold the instance</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // pointed by the variable at that point in the code:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  let</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> pokemonCopy = pokemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  delay</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;inside closure: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">pokemonCopy</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  pokemon = </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Pokemon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Mewtwo&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;after closure: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\\(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">pokemon</span><span style="color:#C678DD;--shiki-dark:#C678DD;">)</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>这就好像，如果我们创建一个中间变量去指向同一个 pokemon，并且捕获这个变量<br> 事实上，使用这个捕获列表和上面的代码一样… 除了这个 pokemonCopy 的中间变量是闭包的局部变量，并且将只能在闭包内被访问。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>Swift 闭包捕获了一个对外部变量需要在闭包内部使用的一个引用。</li><li>那个引用在闭包<strong>被执行</strong>的时候获得定值。</li><li>作为对这个变量的引用的捕捉（并且不是这个变量自身），你能从闭包内部修改这个变量的值（当然，如果这个变量被声明为 var 并且不是 let）</li><li>相反，你能告诉 Swfit 在闭包创建的时候对这个变量定值 并且把这个值保存在本地的一个静态变量中，而不是捕获变量本身。你可以通过使用捕获列表(中括号)，在括号内表达。</li></ul><p>注意：因为捕获列表是一个列表你还可以放多个参数，用逗号隔开，像数组一样</p><blockquote><p>最后感谢原文作者</p></blockquote>`,34)]))}const t=a(o,[["render",e],["__file","swift捕获语义.html.vue"]]),B=JSON.parse(`{"path":"/posts/iOS/swift/swift%E6%8D%95%E8%8E%B7%E8%AF%AD%E4%B9%89.html","title":"深入理解swift中闭包的捕捉语义","lang":"zh-CN","frontmatter":{"title":"深入理解swift中闭包的捕捉语义","icon":"hk-swift","date":"2017-10-19T00:00:00.000Z","category":["Swift"],"tag":["iOS","Swift"],"description":"参考链接：losures Capture Semantics, Part 1: Catch them all! 概述 原文中先定义一个 Pokemon 类 延时执行的闭包 默认捕捉语法 在 swift 中默认的捕捉语法是:被捕获的变量在闭包被执行的时候才被定值1 . 我们能说它捕获到了这个变量的引用(或者 指针)。 这个闭包会在 demo1() 方法函...","head":[["meta",{"property":"og:url","content":"https://oragekk.me/posts/iOS/swift/swift%E6%8D%95%E8%8E%B7%E8%AF%AD%E4%B9%89.html"}],["meta",{"property":"og:site_name","content":"Oragekk's Blog"}],["meta",{"property":"og:title","content":"深入理解swift中闭包的捕捉语义"}],["meta",{"property":"og:description","content":"参考链接：losures Capture Semantics, Part 1: Catch them all! 概述 原文中先定义一个 Pokemon 类 延时执行的闭包 默认捕捉语法 在 swift 中默认的捕捉语法是:被捕获的变量在闭包被执行的时候才被定值1 . 我们能说它捕获到了这个变量的引用(或者 指针)。 这个闭包会在 demo1() 方法函..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-10T06:30:41.000Z"}],["meta",{"property":"article:author","content":"Oragekk"}],["meta",{"property":"article:tag","content":"iOS"}],["meta",{"property":"article:tag","content":"Swift"}],["meta",{"property":"article:published_time","content":"2017-10-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-10T06:30:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解swift中闭包的捕捉语义\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-10-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-10T06:30:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oragekk\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"默认捕捉语法","slug":"默认捕捉语法","link":"#默认捕捉语法","children":[]},{"level":2,"title":"被捕获到的变量都被执行的时候定值","slug":"被捕获到的变量都被执行的时候定值","link":"#被捕获到的变量都被执行的时候定值","children":[]},{"level":2,"title":"修改变量的值","slug":"修改变量的值","link":"#修改变量的值","children":[]},{"level":2,"title":"捕获一个作为静态 copy 的变量","slug":"捕获一个作为静态-copy-的变量","link":"#捕获一个作为静态-copy-的变量","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1678187456000,"updatedTime":1678429841000,"contributors":[{"name":"huangkun","email":"huangkun@tonshow.cn","commits":1}]},"readingTime":{"minutes":4.26,"words":1279},"filePathRelative":"posts/iOS/swift/swift捕获语义.md","localizedDate":"2017年10月19日","excerpt":"<blockquote>\\n<p>参考链接：<a href=\\"https://link.juejin.im/?target=https%3A%2F%2Fgold.xitu.io%2Fentry%2F5796308479bc440066443c8e\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">losures Capture Semantics, Part 1: Catch them all!</a></p>\\n</blockquote>\\n<h2>概述</h2>\\n<p>原文中先定义一个 Pokemon 类</p>\\n<div class=\\"language-swift\\" data-ext=\\"swift\\" data-title=\\"swift\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">class</span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\"> Pokemon</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">: </span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">CustomDebugStringConvertible </span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">  let</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\"> name: </span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">  init</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">(</span><span style=\\"color:#61AFEF;--shiki-dark:#61AFEF;font-style:italic;--shiki-dark-font-style:italic\\">name</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">: </span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">String</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">    self</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.</span><span style=\\"color:#E06C75;--shiki-dark:#E06C75\\">name</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\"> = name</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">  var</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\"> debugDescription: </span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">String</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">return</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\"> \\"</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">\\\\(</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">name</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">)</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">&gt;\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\"> }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">  deinit</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"color:#56B6C2;--shiki-dark:#56B6C2\\">print</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">(</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">\\\\(</span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">self</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">)</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\"> escaped!\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">) }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n</div>","autoDesc":true}`);export{t as comp,B as data};
