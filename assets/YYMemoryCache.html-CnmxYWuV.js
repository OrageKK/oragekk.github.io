import{_ as n,o as l,c as e,b as s,d as i,f as r,a as o}from"./app-CzrUEAVx.js";const p={};function B(t,a){return l(),e("div",null,[a[0]||(a[0]=s("h2",{id:"_1-1-前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-前言"},[s("span",null,"1.1. 前言")])],-1)),a[1]||(a[1]=s("p",null,[i("开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？"),s("br"),i(" 本文将结合 YYCache 的源码逐步带大家找到答案。"),s("br"),i(" YYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一）"),s("br"),i(" YYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，更加难能可贵的是它的性能还非常高。")],-1)),r(" more "),a[2]||(a[2]=o(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>YYCache 是由 YYMemoryCache 与 YYDiskCache 两部分组成的，其中 YYMemoryCache 作为高速内存缓存，而 YYDiskCache 则作为低速磁盘缓存。<br> YYMemoryCache 是内存缓存，所以存取速度非常快，主要用到两种数据结构的 LRU 淘汰算法</p></div><p>NSCache 是苹果提供的一个简单的内存缓存，它有着和 NSDictionary 类似的 API，不同点是它是线程安全的，并且不会 retain key。我在测试时发现了它的几个特点：NSCache 底层并没有用 NSDictionary 等已有的类，而是直接调用了 libcache.dylib，其中线程安全是由 pthread_mutex 完成的。另外，它的性能和 key 的相似度有关，如果有大量相似的 key (比如 “1”, “2”, “3”, …)，NSCache 的存取性能会下降得非常厉害，大量的时间被消耗在 CFStringEqual() 上，不知这是不是 NSCache 本身设计的缺陷。</p><h2 id="_1-2-介绍" tabindex="-1"><a class="header-anchor" href="#_1-2-介绍"><span>1.2. 介绍</span></a></h2><p>YYMemoryCache 是一个高速的内存缓存，用于存储键值对。它与 NSDictionary 相反，Key 被保留并且不复制。API 和性能类似于 NSCache，所有方法都是线程安全的。</p><p>YYMemoryCache 对象与 NSCache 的不同之处在于：</p><p>YYMemoryCache 使用 LRU(least-recently-used) 算法来驱逐对象；NSCache 的驱逐方式是非确定性的。<br> YYMemoryCache 提供 age、cost、count 三种方式控制缓存；NSCache 的控制方式是不精确的。<br> YYMemoryCache 可以配置为在收到内存警告或者 App 进入后台时自动逐出对象。</p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@interface</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> YYMemoryCache</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">NSObject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">#pragma mark</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> - Attribute</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">nullable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">NSString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> *name; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存名称，默认为 nil</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">readonly</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) NSUInteger totalCount; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存对象总数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">readonly</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) NSUInteger totalCost; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存对象总开销</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">#pragma mark</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> - Limit</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> NSUInteger countLimit; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存对象数量限制，默认无限制，超过限制则会在后台逐出一些对象以满足限制</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> NSUInteger costLimit; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存开销数量限制，默认无限制，超过限制则会在后台逐出一些对象以满足限制</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> NSTimeInterval ageLimit; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存时间限制，默认无限制，超过限制则会在后台逐出一些对象以满足限制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> NSTimeInterval autoTrimInterval; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 缓存自动清理时间间隔，默认 5s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> shouldRemoveAllObjectsOnMemoryWarning; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 是否应该在收到内存警告时删除所有缓存内对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> shouldRemoveAllObjectsWhenEnteringBackground; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 是否应该在 App 进入后台时删除所有缓存内对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">nullable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(^didReceiveMemoryWarningBlock)(YYMemoryCache *cache); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 我认为这是一个 hook，便于我们在收到内存警告时自定义处理缓存</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">nullable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(^didEnterBackgroundBlock)(YYMemoryCache *cache); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 我认为这是一个 hook，便于我们在收到 App 进入后台时自定义处理缓存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> releaseOnMainThread; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 是否在主线程释放对象，默认 NO，有些对象（例如 UIView/CALayer）应该在主线程释放</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@property</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> releaseAsynchronously; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 是否异步释放对象，默认 YES</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">containsObjectForKey:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">nullable</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">objectForKey:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setObject:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">nullable</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">object</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> forKey:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setObject:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">nullable</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">object</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> forKey:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> withCost:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSUInteger)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">cost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">removeObjectForKey:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">removeAllObjects</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">#pragma mark</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> - Trim</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">trimToCount:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSUInteger)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 用 LRU 算法删除对象，直到 totalCount &lt;= count</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">trimToCost:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSUInteger)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">cost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 用 LRU 算法删除对象，直到 totalCost &lt;= cost</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">trimToAge:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(NSTimeInterval)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 用 LRU 算法删除对象，直到所有到期对象全部被删除</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@end</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-yymemorycache-是如何做到线程安全的" tabindex="-1"><a class="header-anchor" href="#_1-3-yymemorycache-是如何做到线程安全的"><span>1.3. YYMemoryCache 是如何做到线程安全的</span></a></h2><div class="language-objc" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@implementation</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> YYMemoryCache</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    pthread_mutex_t</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _lock; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 线程锁，旨在保证 YYMemoryCache 线程安全</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _YYLinkedMap *_lru; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// _YYLinkedMap，YYMemoryCache 通过它间接操作缓存对象</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    dispatch_queue_t _queue; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 串行队列，用于 YYMemoryCache 的 trim 操作</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在最初 YYMemoryCache 这里使用的锁是 OSSpinLock 自旋锁（详见 <a href="https://blog.ibireme.com/2015/10/26/yycache/" target="_blank" rel="noopener noreferrer">YYCache 设计思路</a> 备注-关于锁），后面有人在 Github 向作者提 issue 反馈 OSSpinLock 不安全，经过作者的确认（详见 不再安全的 OSSpinLock）最后选择用 pthread_mutex 替代 OSSpinLock。</p></div><h2 id="_1-4-lru-淘汰算法" tabindex="-1"><a class="header-anchor" href="#_1-4-lru-淘汰算法"><span>1.4. LRU 淘汰算法</span></a></h2><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p><p>最常见的实现是使用一个链表保存缓存数据</p><p>【命中率】</p><p>当存在热点数据时，LRU 的效率很好，但偶发性的、周期性的批量操作会导致 LRU 命中率急剧下降，缓存污染情况比较严重。</p><p>Cache 的容量是有限的，当 Cache 的空间都被占满后，如果再次发生缓存失效，就必须选择一个缓存块来替换掉。LRU 法是依据各块使用的情况， 总是选择那个最长时间未被使用的块替换。这种方法比较好地反映了程序局部性规律</p><h2 id="_1-5-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-5-数据结构"><span>1.5. 数据结构</span></a></h2><ul><li>双向链表 (Doubly Linked List) <code>_YYLinkedMap</code></li><li>哈希表 (Dictionary) <code>CFMutableDictionaryRef _dic</code></li></ul><h2 id="_1-6-缓存操作" tabindex="-1"><a class="header-anchor" href="#_1-6-缓存操作"><span>1.6. 缓存操作</span></a></h2><ul><li>新数据插入到链表头部；</li><li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li><li>当链表满的时候，将链表尾部的数据丢弃。</li></ul><h2 id="_1-7-分析图" tabindex="-1"><a class="header-anchor" href="#_1-7-分析图"><span>1.7. 分析图</span></a></h2><figure><img src="https://s3.bmp.ovh/imgs/2024/01/20/c6e7391286dce045.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-8-yymemorycache-m-里的两个分类" tabindex="-1"><a class="header-anchor" href="#_1-8-yymemorycache-m-里的两个分类"><span>1.8. YYMemoryCache.m 里的两个分类</span></a></h2><ol><li><p>链表节点 <code>_YYLinkedMapNode</code></p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@interface</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> _YYLinkedMapNode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">NSObject</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    @package</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 指向前一个节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    __unsafe_unretained _YYLinkedMapNode *_prev; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// retained by dic</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 指向后一个节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    __unsafe_unretained _YYLinkedMapNode *_next; </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// retained by dic</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 缓存key</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _key;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 缓存对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _value;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 当前缓存内存开销</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    NSUInteger _cost;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 缓存时间</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    NSTimeInterval _time;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@end</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>链表 <code>_YYLinkedMap</code></p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@interface</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> _YYLinkedMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">NSObject</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    @package</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 用字典保存所有节点_YYLinkedMapNode (为什么不用oc字典?因为用CFMutableDictionaryRef效率高，毕竟基于c)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    CFMutableDictionaryRef _dic;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 总缓存开销</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    NSUInteger _totalCost;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 总缓存数量</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    NSUInteger _totalCount;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 链表头节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _YYLinkedMapNode *_head;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 链表尾节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _YYLinkedMapNode *_tail;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 是否在主线程上，异步释放 _YYLinkedMapNode对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _releaseOnMainThread;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 是否异步释放 _YYLinkedMapNode对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    BOOL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _releaseAsynchronously;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 添加节点到链表头节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">insertNodeAtHead:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_YYLinkedMapNode *)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移动当前节点到链表头节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">bringNodeToHead:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_YYLinkedMapNode *)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移除链表节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">removeNode:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_YYLinkedMapNode *)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;font-style:italic;--shiki-dark-font-style:italic;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移除链表尾节点(如果存在)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (_YYLinkedMapNode *)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">removeTailNode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移除所有缓存</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">removeAll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">@end</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_1-9-链表插入、查找、替换操作实现" tabindex="-1"><a class="header-anchor" href="#_1-9-链表插入、查找、替换操作实现"><span>1.9. 链表插入、查找、替换操作实现</span></a></h2><ul><li><p>添加节点到链表头节点</p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 添加节点到链表头节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)insertNodeAtHead:(_YYLinkedMapNode *)node {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 哈希表保存链表节点node</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    CFDictionarySetValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_dic, (__bridge </span><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> *)(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (__bridge </span><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> *)(node));</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 叠加该缓存开销到总内存开销</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCost </span><span style="color:#C678DD;--shiki-dark:#C678DD;">+=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_cost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 总缓存数+1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCount</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_head) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 存在链表头，取代当前表头</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _head;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        _head</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 重新赋值链表表头临时变量_head</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        _head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 不存在链表头</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        _head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://upload-images.jianshu.io/upload_images/295346-1cb03d629ecbf2fa.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>移动当前节点到链表头节点</p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移动当前节点到链表头节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)bringNodeToHead:(_YYLinkedMapNode *)node {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 当前节点已是链表头节点</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        //**如果node是链表尾节点**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 把node指向的上一个节点赋值给链表尾节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        _tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 把链表尾节点指向的下一个节点赋值nil</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        _tail</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        //**如果node是非链表尾节点和链表头节点**</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 此处比较难以理解：总结如下</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 链接当前节点上节点(node-&gt;_prev)到当前节点下节点（node-&gt;_next）的上索引(-&gt;_prev)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">_next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 链接当前节点下节点(node-&gt;_next)到当前节点上节点（node-&gt;_prev）的下索引(-&gt;_next)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 此处操作等于将本节点上下索引分别赋值给右左节点上下索引，将上下节点链接</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 把链表头节点赋值给node指向的下一个节点</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _head;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 把node指向的上一个节点赋值nil</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 把节点赋值给链表头节点的指向的上一个节点</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    _head</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://upload-images.jianshu.io/upload_images/295346-682e8396c2d9e092.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>移除节点</p><ul><li><p>移除指定节点</p><div class="language-objc" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移除节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)removeNode:(_YYLinkedMapNode *)node {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 从字典中移除node</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    CFDictionaryRemoveValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_dic, (__bridge </span><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> *)(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 减掉总内存消耗</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCost </span><span style="color:#C678DD;--shiki-dark:#C678DD;">-=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_cost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // // 总缓存数-1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCount</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">--</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 重新连接链表(看图分析吧)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">_next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node) _head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> node) _tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li><li><p>移除尾节点</p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移除尾节点(如果存在)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (_YYLinkedMapNode *)removeTailNode {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">_tail) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 拷贝一份要删除的尾节点指针</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _YYLinkedMapNode *tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _tail;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 移除链表尾节点</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    CFDictionaryRemoveValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_dic, (__bridge </span><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> *)(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">_tail</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 减掉总内存消耗</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCost </span><span style="color:#C678DD;--shiki-dark:#C678DD;">-=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> _tail</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_cost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 总缓存数-1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCount</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">--</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _tail) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 清除节点，链表上已无节点了</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        _head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 设倒数第二个节点为链表尾节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        _tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> _tail</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        _tail</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_next</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 返回完tail后_tail将会释放</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tail;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>移除所有缓存</p><div class="language-objc line-numbers-mode" data-ext="objc" data-title="objc"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 移除所有缓存</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)removeAll {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 清空内存开销与缓存数量</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCost </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _totalCount </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 清空头尾节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _head </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    _tail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">CFDictionaryGetCount</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_dic) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 拷贝一份字典</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        CFMutableDictionaryRef holder </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _dic;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // 重新分配新的空间</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        _dic </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> CFDictionaryCreateMutable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">CFAllocatorGetDefault</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(), </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, &amp;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">kCFTypeDictionaryKeyCallBacks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, &amp;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">kCFTypeDictionaryValueCallBacks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_releaseAsynchronously) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">            // 异步释放缓存</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            dispatch_queue_t queue </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _releaseOnMainThread </span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> dispatch_get_main_queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> YYMemoryCacheGetReleaseQueue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            dispatch_async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(queue, ^{</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                CFRelease</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(holder); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// hold and release in specified queue</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (_releaseOnMainThread </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> !</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pthread_main_np</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">            // 主线程上释放缓存</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            dispatch_async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">dispatch_get_main_queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(), ^{</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                CFRelease</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(holder); </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// hold and release in specified queue</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">            // 同步释放缓存</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            CFRelease</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(holder);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,26))])}const k=n(p,[["render",B],["__file","YYMemoryCache.html.vue"]]),d=JSON.parse(`{"path":"/posts/iOS/source/YYMemoryCache.html","title":"YYCache优秀的缓存设计","lang":"zh-CN","frontmatter":{"title":"YYCache优秀的缓存设计","date":"2019-04-26T16:08:25.000Z","icon":"cache","star":true,"category":["iOS"],"tag":["iOS"],"description":"1.1. 前言 开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？ 本文将结合 YYCache 的源码逐步带大家找到答案。 YYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一） YYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，...","head":[["meta",{"property":"og:url","content":"https://oragekk.me/posts/iOS/source/YYMemoryCache.html"}],["meta",{"property":"og:site_name","content":"Oragekk's Blog"}],["meta",{"property":"og:title","content":"YYCache优秀的缓存设计"}],["meta",{"property":"og:description","content":"1.1. 前言 开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？ 本文将结合 YYCache 的源码逐步带大家找到答案。 YYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一） YYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s3.bmp.ovh/imgs/2024/01/20/c6e7391286dce045.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-20T08:16:10.000Z"}],["meta",{"property":"article:author","content":"Oragekk"}],["meta",{"property":"article:tag","content":"iOS"}],["meta",{"property":"article:published_time","content":"2019-04-26T16:08:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-20T08:16:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"YYCache优秀的缓存设计\\",\\"image\\":[\\"https://s3.bmp.ovh/imgs/2024/01/20/c6e7391286dce045.webp\\",\\"https://upload-images.jianshu.io/upload_images/295346-1cb03d629ecbf2fa.png\\",\\"https://upload-images.jianshu.io/upload_images/295346-682e8396c2d9e092.png\\"],\\"datePublished\\":\\"2019-04-26T16:08:25.000Z\\",\\"dateModified\\":\\"2024-01-20T08:16:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oragekk\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":2,"title":"1.1. 前言","slug":"_1-1-前言","link":"#_1-1-前言","children":[]},{"level":2,"title":"1.2. 介绍","slug":"_1-2-介绍","link":"#_1-2-介绍","children":[]},{"level":2,"title":"1.3. YYMemoryCache 是如何做到线程安全的","slug":"_1-3-yymemorycache-是如何做到线程安全的","link":"#_1-3-yymemorycache-是如何做到线程安全的","children":[]},{"level":2,"title":"1.4. LRU 淘汰算法","slug":"_1-4-lru-淘汰算法","link":"#_1-4-lru-淘汰算法","children":[]},{"level":2,"title":"1.5. 数据结构","slug":"_1-5-数据结构","link":"#_1-5-数据结构","children":[]},{"level":2,"title":"1.6. 缓存操作","slug":"_1-6-缓存操作","link":"#_1-6-缓存操作","children":[]},{"level":2,"title":"1.7. 分析图","slug":"_1-7-分析图","link":"#_1-7-分析图","children":[]},{"level":2,"title":"1.8. YYMemoryCache.m 里的两个分类","slug":"_1-8-yymemorycache-m-里的两个分类","link":"#_1-8-yymemorycache-m-里的两个分类","children":[]},{"level":2,"title":"1.9. 链表插入、查找、替换操作实现","slug":"_1-9-链表插入、查找、替换操作实现","link":"#_1-9-链表插入、查找、替换操作实现","children":[]}],"git":{"createdTime":1678187456000,"updatedTime":1705738570000,"contributors":[{"name":"oragekk","email":"oragekk@163.com","commits":2},{"name":"huangkun","email":"huangkun@tonshow.cn","commits":1}]},"readingTime":{"minutes":8.18,"words":2453},"filePathRelative":"posts/iOS/source/YYMemoryCache.md","localizedDate":"2019年4月26日","excerpt":"<h2>1.1. 前言</h2>\\n<p>开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？<br>\\n本文将结合 YYCache 的源码逐步带大家找到答案。<br>\\nYYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一）<br>\\nYYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，更加难能可贵的是它的性能还非常高。</p>\\n","autoDesc":true}`);export{k as comp,d as data};
