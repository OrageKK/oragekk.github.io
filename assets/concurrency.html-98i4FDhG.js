import{_ as s,o as e,c as n,a as t}from"./app-B2OSkxx7.js";const r={};function o(i,a){return e(),n("div",null,a[0]||(a[0]=[t(`<p>Dart 通过 async-await、isolate 以及一些异步类型概念（例如 <code>Future</code> 和 <code>Stream</code>）支持了并发代码编程。本篇文章会对 async-await、<code>Future</code> 和 <code>Stream</code> 进行简略的介绍，而侧重点放在 isolate 的讲解上。</p><p>在应用中，所有的 Dart 代码都在 <strong>isolate</strong> 中运行。每一个 Dart 的 isolate 都有独立的运行线程，它们无法与其他 isolate 共享可变对象。在需要进行通信的场景里，isolate 会使用消息机制。很多 Dart 应用都只使用一个 isolate，也就是 main isolate。你可以创建额外的 isolate 以便在多个处理器核心上执行并行代码。</p><p>尽管 Dart 的 isolate 模型设计是基于操作系统提供的进程和线程等更为底层的原语进行设计的， Dart 虚拟机对其的使用是一个具体的实现，在本篇文章中，我们不对其具体实现展开讨论。</p><h2 id="异步的类型和语法" tabindex="-1"><a class="header-anchor" href="#异步的类型和语法"><span>异步的类型和语法</span></a></h2><p>如果你已经对 <code>Future</code>、<code>Stream</code> 和 async-await 比较熟悉了，可以直接跳到 <a href="https://dart.cn/guides/language/concurrency#how-isolates-work" target="_blank" rel="noopener noreferrer">isolate 部分</a> 进行阅读。</p><h3 id="future-和-stream-类型" tabindex="-1"><a class="header-anchor" href="#future-和-stream-类型"><span>Future 和 Stream 类型</span></a></h3><p>Dart 语言和库通过 <code>Future</code> 和 <code>Stream</code> 对象，来提供会在当前调用的未来返回某些值的功能。以 JavaScript 中的 Promise 为例，在 Dart 中一个最终会返回 <code>int</code> 类型值的 promise，应当声明为 <code>Future&lt;int&gt;</code>；一个会持续返回一系列 <code>int</code> 类型值的 promise，应当声明为 <code>Stream&lt;int&gt;</code>。</p><p>让我们用 dart:io 来举另外一个例子。<code>File</code> 的同步方法 <a href="https://api.dart.cn/stable/dart-io/File/readAsStringSync.html" target="_blank" rel="noopener noreferrer"><code>readAsStringSync()</code></a> 会以同步调用的方式读取文件，在读取完成或者抛出错误前保持阻塞。这个会返回 <code>String</code> 类型的对象，或者抛出异常。而与它等效的异步方法 <a href="https://api.dart.cn/stable/dart-io/File/readAsString.html" target="_blank" rel="noopener noreferrer"><code>readAsString()</code></a>，会在调用时立刻返回 <code>Future&lt;String&gt;</code> 类型的对象。在未来的某一刻，<code>Future&lt;String&gt;</code> 会结束，并返回一个字符串或错误。</p><h4 id="为什么异步的代码如此重要" tabindex="-1"><a class="header-anchor" href="#为什么异步的代码如此重要"><span>为什么异步的代码如此重要？</span></a></h4><p>It matters whether a method is synchronous or asynchronous because most apps need to do more than one thing at a time.</p><p>大部分应用需要在同一时刻做很多件事。例如，应用可能会发起一个 HTTP 请求，同时在请求返回前对用户的操作做出不同的界面更新。异步的代码会有助于应用保持更高的可交互状态。</p><p>异步场景包括调用系统 API，例如非阻塞的 I/O 操作、HTTP 请求或与浏览器交互。还有一些场景是利用 Dart 的 isolate 进行计算，或等待一个计时器的触发。这些场景要么是在不同的线程运行，要么是被系统或 Dart 运行时处理，让 Dart 代码可以在计算时同步运行。</p><h3 id="async-await-语法" tabindex="-1"><a class="header-anchor" href="#async-await-语法"><span>async-await 语法</span></a></h3><p><code>async</code> 和 <code>await</code> 关键字是用声明来定义异步函数和获取它们的结果的方式。</p><p>下面是一段同步代码调用文件 I/O 时阻塞的例子：</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Read some data.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fileData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> _readFileSync</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> jsonDecode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(fileData);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Use that data.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Number of JSON keys: </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">jsonData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> _readFileSync</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> file </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> File</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(filename);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> contents </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> file.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">readAsStringSync</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> contents.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">trim</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>下面是类似的代码，但是变成了 <strong>异步调用</strong>：</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Read some data.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fileData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> await</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> _readFileAsync</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> jsonDecode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(fileData);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Use that data.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Number of JSON keys: </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">jsonData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Future</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">_readFileAsync</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> file </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> File</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(filename);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> contents </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> await</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> file.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">readAsString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> contents.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">trim</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><code>main()</code> 函数在调用 <code>_readFileAsync()</code> 前使用了 <code>await</code> 关键字，让原生代码（文件 I/O）执行的同时，其他的 Dart 代码（例如事件处理器）能继续执行。使用 <code>await</code> 后，<code>_readFileAsync()</code> 调用返回的 <code>Future&lt;String&gt;</code> 类型也转换为了 <code>String</code>。从而在将结果 <code>content</code> 赋予变量时，隐式转换为 <code>String</code> 类型。</p><p><strong>备注:</strong></p><p><code>await</code> 关键字仅在函数体前定义了 <code>async</code> 的函数中有效。</p><p>如下图所示，无论是在 Dart VM 还是在系统中， Dart 代码都会在 <code>readAsString()</code> 执行非 Dart 代码时暂停。在 <code>readAsString()</code> 返回值后，Dart 代码将继续执行。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/basics-await.png" alt="类似于流程图的图形显示了应用程序代码从开始到退出的执行过程，在这之间等待本地I/O" tabindex="0" loading="lazy"><figcaption>类似于流程图的图形显示了应用程序代码从开始到退出的执行过程，在这之间等待本地I/O</figcaption></figure><p>如果你想了解更多关于 <code>async</code>、<code>await</code> 和 <code>Future</code> 的内容，可以访问 <a href="https://dart.cn/codelabs/async-await" target="_blank" rel="noopener noreferrer">异步编程 codelab</a> 进行学习。</p><h2 id="isolate-的工作原理" tabindex="-1"><a class="header-anchor" href="#isolate-的工作原理"><span>Isolate 的工作原理</span></a></h2><p>现代的设备通常会使用多核 CPU。开发者为了让程序在设备上有更好的表现，有时会使用共享内容的线程来并发运行代码。然而，状态的共享可能会 <a href="https://baike.baidu.com/l/kex6qKvt" target="_blank" rel="noopener noreferrer">产生竞态条件，从而造成错误</a>，也可能会增加代码的复杂度。</p><p>Dart 代码并不在多个线程上运行，取而代之的是它们会在 isolate 内运行。每一个 isolate 会有自己的堆内存，从而确保 isolate 之间互相隔离，无法互相访问状态。由于这样的实现并不会共享内存，所以你也不需要担心 <a href="https://baike.baidu.com/l/My2bXiba" target="_blank" rel="noopener noreferrer">互斥锁和其他锁</a>。</p><p>在使用 isolate 时，你的 Dart 代码可以在同一时刻进行多个独立的任务，并且使用可用的处理器核心。 Isolate 与线程和进程近似，但是<mark>每个 isolate 都拥有独立的内存，以及运行事件循环的独立线程。</mark></p><p><strong>Platform note:</strong> Only the <a href="https://dart.cn/overview#platform" target="_blank" rel="noopener noreferrer">Dart Native platform</a> implements isolates. To learn more about the Dart Web platform, see the <a href="https://dart.cn/guides/language/concurrency#concurrency-on-the-web" target="_blank" rel="noopener noreferrer">Concurrency on the web</a> section.</p><div class="hint-container info"><p class="hint-container-title">平台说明</p><p>只有<a href="https://dart.cn/overview#platform" target="_blank" rel="noopener noreferrer">Dart Native</a>平台实现了隔离器。要了解更多关于Dart网络平台的信息，请参见<a href="#%E5%9C%A8web%E7%9A%84%E5%B9%B6%E5%8F%91">Web的并发性部分</a>。</p></div><h3 id="主-isolate" tabindex="-1"><a class="header-anchor" href="#主-isolate"><span>主 isolate</span></a></h3><p>在一般场景下，你完全无需关心 isolate。通常一个 Dart 应用会在主 isolate 下执行所有代码，如下图所示：</p><figure><img src="https://dart.cn/guides/language/concurrency/images/basics-main-isolate.png" alt="图中显示了一个主隔离区，它运行，对事件作出反应，然后退出" tabindex="0" loading="lazy"><figcaption>图中显示了一个主隔离区，它运行<code>main()</code>，对事件作出反应，然后退出</figcaption></figure><p>就算是只有一个 isolate 的应用，只要通过使用 async-await 来处理异步操作，也完全可以流畅运行。一个拥有良好性能的应用，会在快速启动后尽快进入事件循环。这使得应用可以通过异步操作快速响应对应的事件。</p><h3 id="isolate-的生命周期" tabindex="-1"><a class="header-anchor" href="#isolate-的生命周期"><span>Isolate 的生命周期</span></a></h3><p>如下图所示，每个 isolate 都是从运行 Dart 代码开始的，比如 <code>main()</code> 函数。执行的 Dart 代码可能会注册一些事件监听，例如处理用户操作或文件读写。当 isolate 执行的 Dart 代码结束后，如果它还需要处理已监听的事件，那么它依旧会继续被保持。处理完所有事件后，isolate 会退出。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/basics-isolate.png" alt="一个更一般的图显示，任何隔离体都会运行一些代码，选择性地对事件做出反应，然后退出" tabindex="0" loading="lazy"><figcaption>一个更一般的图显示，任何隔离体都会运行一些代码，选择性地对事件做出反应，然后退出</figcaption></figure><h3 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理"><span>事件处理</span></a></h3><p>在客户端应用中，主 isolate 的事件队列内，可能会包含重绘的请求、点击的通知或者其他界面事件。例如，下图展示了包含四个事件的事件队列，队列会按照先进先出的模式处理事件。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/event-loop.png" alt="一个显示事件被逐一送入事件循环的图。" tabindex="0" loading="lazy"><figcaption>一个显示事件被逐一送入事件循环的图。</figcaption></figure><p>如下图所示，在 <code>main()</code> 方法执行完毕后，事件队列中的处理才开始，此时处理的是第一个重绘的事件。而后主 isolate 会处理点击事件，接着再处理另一个重绘事件。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/event-handling.png" alt="显示主隔离区逐一执行事件处理程序的图" tabindex="0" loading="lazy"><figcaption>显示主隔离区逐一执行事件处理程序的图</figcaption></figure><p>如果某个同步执行的操作花费了很长的处理时间，应用看起来就像是失去了响应。在下图中，处理点击事件的代码比较耗时，导致紧随其后的事件并没有及时处理。这时应用可能会产生卡顿，所有的动画都无法流畅播放。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/event-jank.png" alt="图中显示了一个执行时间过长的分接处理程序" tabindex="0" loading="lazy"><figcaption>图中显示了一个执行时间过长的分接处理程序</figcaption></figure><p>在一个客户端应用中，耗时过长的同步操作，通常会导致 <a href="https://flutter.cn/docs/perf/rendering-performance" target="_blank" rel="noopener noreferrer">卡顿的动画</a>。而最糟糕的是，应用界面可能完全失去响应。</p><h3 id="后台运行对象" tabindex="-1"><a class="header-anchor" href="#后台运行对象"><span>后台运行对象</span></a></h3><p>如果你的应用受到耗时计算的影响而出现卡顿，例如 <a href="https://flutter.cn/docs/cookbook/networking/background-parsing" target="_blank" rel="noopener noreferrer">解析较大的 JSON 文件</a>，你可以考虑将耗时计算转移到单独工作的 isolate，通常我们称这样的 isolate 为 <strong>后台运行对象</strong>。下图展示了一种常用场景，你可以生成一个 isolate，它将执行耗时计算的任务，并在结束后退出。这个 isolate 工作对象退出时会把结果返回。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/isolate-bg-worker.png" alt="A figure showing a main isolate and a simple worker isolate" tabindex="0" loading="lazy"><figcaption>A figure showing a main isolate and a simple worker isolate</figcaption></figure><p>每个 isolate 都可以通过消息通信传递一个对象，这个对象的所有内容都需要满足可传递的条件。并非所有的对象都满足传递条件，在无法满足条件时，消息发送会失败。举个例子，如果你想发送一个 <code>List&lt;Object&gt;</code>，你需要确保这个列表中所有元素都是可被传递的。假设这个列表中有一个 <code>Socket</code>，由于它无法被传递，所以你无法发送整个列表。</p><p>你可以查阅 <a href="https://api.dart.cn/stable/dart-isolate/SendPort/send.html" target="_blank" rel="noopener noreferrer"><code>send()</code> 方法</a> 的文档来确定哪些类型可以进行传递。</p><p>Isolate 工作对象可以进行 I/O 操作、设置定时器，以及其他各种行为。它会持有自己内存空间，与主 isolate 互相隔离。这个 isolate 在阻塞时也不会对其他 isolate 造成影响。</p><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><p>本节将重点讨论使用 <code>Isolate</code> API 实现 isolate 的一些示例。</p><h3 id="实现一个简单的-isolate-工作对象" tabindex="-1"><a class="header-anchor" href="#实现一个简单的-isolate-工作对象"><span>实现一个简单的 isolate 工作对象</span></a></h3><p>这些例子实现了一个主隔离器，它生成了一个简单的工作隔离器。 <a href="https://api.dart.cn/dev/dart-isolate/Isolate/run.html" target="_blank" rel="noopener noreferrer"><code>Isolate.run()</code></a> 简化了设置和管理工作者隔离区的步骤:</p><ol><li>生成（启动并创建）一个隔离器</li><li>在生成的隔离体上运行一个函数</li><li>捕获结果</li><li>将结果返回给主隔离区</li><li>工作完成后，终止隔离区的运行</li><li>检查、捕获并将异常和错误抛回给主隔离区</li></ol><div class="hint-container tip"><p class="hint-container-title">备注</p><p>如果你使用Flutter，考虑使用<a href="https://api.flutter-io.cn/flutter/foundation/compute-constant.html" target="_blank" rel="noopener noreferrer">Flutter的<code>compute()</code>函数</a>而不是<code>Isolate.run()</code>。<code>compute</code>函数允许你的代码在<a href="https://dart.cn/overview#platform" target="_blank" rel="noopener noreferrer">本地和非本地平台</a>上工作。当只针对原生平台时，使用<code>Isolate.run()</code>以获得更符合人类工程学的的API。</p></div><h4 id="在一个新的隔离区中运行一个现有的方法" tabindex="-1"><a class="header-anchor" href="#在一个新的隔离区中运行一个现有的方法"><span>在一个新的隔离区中运行一个现有的方法</span></a></h4><p>主 isolate 的代码如下：</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Read some data.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> await</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Isolate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_readAndParseJson);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Use that data.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Number of JSON keys: </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">jsonData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>生成的隔离器会执行作为第一个参数传递的函数, <code>_readAndParseJson</code>:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Future</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dynamic</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">_readAndParseJson</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fileData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> await</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> File</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(filename).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">readAsString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> jsonDecode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(fileData) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">as</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dynamic</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><ol><li><code>Isolate.run()</code> 产生了一个隔离器，即后台工作者， 而 <code>main()</code> 则在等待结果</li><li>生成的隔离器会执行传递给 <code>run()</code>的参数: the function <code>_readAndParseJson()</code>.</li><li><code>Isolate.run()</code> 从返回中获取结果，并将该值送回主隔离区，从而关闭工作隔离区。</li><li>工作者隔离区会将保存结果的内存<em>转移</em>到主隔离区。它并<em>不复制</em>数据。工作者隔离区会执行一个验证通道，以确保对象被允许转移。</li></ol><p><code>_readAndParseJson()</code> 是一个现有的异步函数，可以很容易地直接在主隔离区中运行。使用 <code>Isolate.run()</code> 来运行它，从而实现了并发性。工作者隔离区完全抽象了<code>_readAndParseJson()</code>的计算过程。它可以在不阻塞主隔离区的情况下完成。</p><p><code>Isolate.run()</code> 的结果总是一个Future，因为主隔离区的代码仍在继续运行。工作者隔离区执行的计算是同步的还是异步的，并不影响主隔离区，因为无论如何，它都是在并发地运行。</p><h4 id="sending-closures-with-isolates" tabindex="-1"><a class="header-anchor" href="#sending-closures-with-isolates"><span>Sending closures with isolates</span></a></h4><p>您也可以在主隔离区中直接使用函数字面或闭包，用<code>run()</code> 创建一个简单的工作隔离区。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Read some data.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> await</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Isolate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">async</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fileData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> await</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> File</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(filename).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">readAsString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    final</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> jsonDecode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(fileData) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">as</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">dynamic</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jsonData;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // Use that data.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Number of JSON keys: </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">jsonData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>这个例子的完成情况与前一个例子相同。一个新的隔离器产生了，计算了一些东西，并把结果送了回来。</p><p>不过，现在这个隔离体发送的是一个<a href="https://dart.cn/guides/language/language-tour#anonymous-functions" target="_blank" rel="noopener noreferrer">闭包</a>。与典型的命名函数相比，闭包的限制较少，无论是在功能上还是在代码中的编写方式上。在这个例子中，<code>Isolate.run()</code>执行的是看起来像本地代码的东西，同时进行。在这个意义上，你可以把<code>run()</code>想象成一个 &quot;并行运行 &quot;的<a href="https://dart.cn/guides/language/language-tour#control-flow-statements" target="_blank" rel="noopener noreferrer">控制流操作符</a>。</p><h3 id="实现一个简单的-isolate-工作对象-1" tabindex="-1"><a class="header-anchor" href="#实现一个简单的-isolate-工作对象-1"><span>实现一个简单的 isolate 工作对象</span></a></h3><p><code>Isolate.run()</code> a抽取了一些较低级别的、与隔离物相关的API，以简化隔离物管理：</p><ul><li><a href="https://api.dart.cn/stable/dart-isolate/Isolate/spawn.html" target="_blank" rel="noopener noreferrer"><code>Isolate.spawn()</code></a> and <a href="https://api.dart.cn/stable/dart-isolate/Isolate/exit.html" target="_blank" rel="noopener noreferrer"><code>Isolate.exit()</code></a></li><li><a href="https://api.dart.cn/stable/dart-isolate/ReceivePort-class.html" target="_blank" rel="noopener noreferrer"><code>ReceivePort</code></a> and <a href="https://api.dart.cn/stable/dart-isolate/SendPort-class.html" target="_blank" rel="noopener noreferrer"><code>SendPort</code></a></li></ul><p>您可以直接使用这些基元来对隔离区的功能进行更精细的控制。例如，<code>run()</code>在返回一条消息后就会关闭其隔离区。如果您想允许多个消息在隔离区之间传递，该怎么办呢？您可以用与<code>run()</code>的实现方式大致相同的方式来设置自己的隔离区，只是以稍微不同的方式利用<code>SendPort</code>的<a href="https://api.dart.cn/stable/dart-isolate/SendPort/send.html" target="_blank" rel="noopener noreferrer"><code>send()</code>方法</a>。</p><p>如果你想在 isolate 之间建立更多的通信，那么你需要使用 <code>SendPort</code> 的 <a href="https://api.dart.cn/stable/dart-isolate/SendPort/send.html" target="_blank" rel="noopener noreferrer"><code>send()</code> 方法</a>。下图展示了一种常见的场景，主 isolate 会发送请求消息至 isolate 工作对象，然后它们之间会继续进行多次通信，进行请求和回复。</p><figure><img src="https://dart.cn/guides/language/concurrency/images/isolate-custom-bg-worker.png" alt="图中显示了主隔离器催生隔离器，然后发送请求消息，工作隔离器用回复消息进行响应；显示了两个请求-回复循环。" tabindex="0" loading="lazy"><figcaption>图中显示了主隔离器催生隔离器，然后发送请求消息，工作隔离器用回复消息进行响应；显示了两个请求-回复循环。</figcaption></figure><p>下方列举的 <a href="https://github.com/dart-lang/samples/tree/master/isolates" target="_blank" rel="noopener noreferrer">isolate 示例</a> 包含了发送多次消息的使用方法：</p><ul><li><a href="https://github.com/dart-lang/samples/tree/master/isolates/bin/send_and_receive.dart" target="_blank" rel="noopener noreferrer">send_and_receive.dart</a> 展示了如何从主 isolate 发送消息至生成的 isolate，与前面的示例较为接近，不过没有使用 <code>run()</code> 方法；</li><li><a href="https://github.com/dart-lang/samples/tree/master/isolates/bin/long_running_isolate.dart" target="_blank" rel="noopener noreferrer">long_running_isolate.dart</a> 展示了如何生成一个长期运行、且多次发送和接收消息的 isolate。</li></ul><h2 id="性能和-isolate-组" tabindex="-1"><a class="header-anchor" href="#性能和-isolate-组"><span>性能和 isolate 组</span></a></h2><p>当一个 isolate 调用了 <a href="https://api.dart.cn/stable/dart-isolate/Isolate/spawn.html" target="_blank" rel="noopener noreferrer"><code>Isolate.spawn()</code></a>，两个 isolate 将拥有同样的执行代码，并归入同一个 <strong>isolate 组</strong> 中。 Isolate 组会带来性能优化，例如新的 isolate 会运行由 isolate 组持有的代码，即共享代码调用。同时，<code>Isolate.exit()</code> 仅在对应的 isolate 属于同一组时有效。</p><p>某些场景下，你可能需要使用 <a href="https://api.dart.cn/stable/dart-isolate/Isolate/spawnUri.html" target="_blank" rel="noopener noreferrer"><code>Isolate.spawnUri()</code></a>，使用执行的 URI 生成新的 isolate，并且包含代码的副本。然而，<code>spawnUri()</code> 会比 <code>spawn()</code> 慢很多，并且新生成的 isolate 会位于新的 isolate 组。另外，当 isolate 在不同的组中，它们之间的消息传递会变得更慢。</p><div class="hint-container tip"><p class="hint-container-title">备注</p><p><img src="https://dart.cn/assets/img/shared/flutter/icon/64.png" alt="Flutter logo" width="20" loading="lazy">Flutter 不支持 <code>Isolate.spawnUri()</code>。</p></div><h2 id="在web的并发" tabindex="-1"><a class="header-anchor" href="#在web的并发"><span>在Web的并发</span></a></h2><p>所有的Dart应用程序都可以使用<code>async-await</code>、<code>Future</code>和<code>Stream</code>进行非阻塞、交错的计算。然而，<a href="(https://dart.cn/overview#platform)">Dart web 平台</a>并不支持隔离器。Dart网络应用程序可以使用网络工作者在后台线程中运行脚本，这与隔离程序类似。不过，<a href="https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener noreferrer">web workers</a>的功能和能力与隔离器有些不同。</p><p>例如，当Web工作者在线程之间发送数据时，他们会来回复制数据。不过，数据复制的速度可能非常慢，尤其是对于大的消息。隔离器也做同样的事情，但也提供了API，可以更有效地传输保存消息的内存。</p><p>创建Web Worker和Isolates也有不同。你只能通过声明一个单独的程序入口并单独编译来创建网络工作者。启动Web Worker类似于使用<code>Isolate.spoonUri</code>来启动一个隔离器。您也可以使用<code>Isolate.spown</code>来启动一个隔离器，这需要的资源较少，因为它<a href="https://dart.cn/guides/language/concurrency#performance-and-isolate-groups" target="_blank" rel="noopener noreferrer">重用了一些与催生隔离器相同的代码和数据</a>。Web Worker没有一个同等的API。</p>`,86)]))}const p=s(r,[["render",o],["__file","concurrency.html.vue"]]),c=JSON.parse(`{"path":"/posts/cross-platform/Flutter/concurrency.html","title":"Dart 中的并发","lang":"zh-CN","frontmatter":{"title":"Dart 中的并发","icon":"asynchronous","date":"2023-04-26T00:00:00.000Z","cover":"https://w.wallhaven.cc/full/72/wallhaven-7286w9.png","category":["Flutter","Dart"],"tag":["Dart"],"description":"Dart 通过 async-await、isolate 以及一些异步类型概念（例如 Future 和 Stream）支持了并发代码编程。本篇文章会对 async-await、Future 和 Stream 进行简略的介绍，而侧重点放在 isolate 的讲解上。 在应用中，所有的 Dart 代码都在 isolate 中运行。每一个 Dart 的 iso...","head":[["meta",{"property":"og:url","content":"https://oragekk.me/posts/cross-platform/Flutter/concurrency.html"}],["meta",{"property":"og:site_name","content":"Oragekk's Blog"}],["meta",{"property":"og:title","content":"Dart 中的并发"}],["meta",{"property":"og:description","content":"Dart 通过 async-await、isolate 以及一些异步类型概念（例如 Future 和 Stream）支持了并发代码编程。本篇文章会对 async-await、Future 和 Stream 进行简略的介绍，而侧重点放在 isolate 的讲解上。 在应用中，所有的 Dart 代码都在 isolate 中运行。每一个 Dart 的 iso..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://w.wallhaven.cc/full/72/wallhaven-7286w9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T09:11:11.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://w.wallhaven.cc/full/72/wallhaven-7286w9.png"}],["meta",{"name":"twitter:image:alt","content":"Dart 中的并发"}],["meta",{"property":"article:author","content":"Oragekk"}],["meta",{"property":"article:tag","content":"Dart"}],["meta",{"property":"article:published_time","content":"2023-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T09:11:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dart 中的并发\\",\\"image\\":[\\"https://dart.cn/guides/language/concurrency/images/basics-await.png\\",\\"https://dart.cn/guides/language/concurrency/images/basics-main-isolate.png\\",\\"https://dart.cn/guides/language/concurrency/images/basics-isolate.png\\",\\"https://dart.cn/guides/language/concurrency/images/event-loop.png\\",\\"https://dart.cn/guides/language/concurrency/images/event-handling.png\\",\\"https://dart.cn/guides/language/concurrency/images/event-jank.png\\",\\"https://dart.cn/guides/language/concurrency/images/isolate-bg-worker.png\\",\\"https://dart.cn/guides/language/concurrency/images/isolate-custom-bg-worker.png\\",\\"https://dart.cn/assets/img/shared/flutter/icon/64.png =20x\\"],\\"datePublished\\":\\"2023-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-26T09:11:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oragekk\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":2,"title":"异步的类型和语法","slug":"异步的类型和语法","link":"#异步的类型和语法","children":[{"level":3,"title":"Future 和 Stream 类型","slug":"future-和-stream-类型","link":"#future-和-stream-类型","children":[]},{"level":3,"title":"async-await 语法","slug":"async-await-语法","link":"#async-await-语法","children":[]}]},{"level":2,"title":"Isolate 的工作原理","slug":"isolate-的工作原理","link":"#isolate-的工作原理","children":[{"level":3,"title":"主 isolate","slug":"主-isolate","link":"#主-isolate","children":[]},{"level":3,"title":"Isolate 的生命周期","slug":"isolate-的生命周期","link":"#isolate-的生命周期","children":[]},{"level":3,"title":"事件处理","slug":"事件处理","link":"#事件处理","children":[]},{"level":3,"title":"后台运行对象","slug":"后台运行对象","link":"#后台运行对象","children":[]}]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[{"level":3,"title":"实现一个简单的 isolate 工作对象","slug":"实现一个简单的-isolate-工作对象","link":"#实现一个简单的-isolate-工作对象","children":[]},{"level":3,"title":"实现一个简单的 isolate 工作对象","slug":"实现一个简单的-isolate-工作对象-1","link":"#实现一个简单的-isolate-工作对象-1","children":[]}]},{"level":2,"title":"性能和 isolate 组","slug":"性能和-isolate-组","link":"#性能和-isolate-组","children":[]},{"level":2,"title":"在Web的并发","slug":"在web的并发","link":"#在web的并发","children":[]}],"git":{"createdTime":1682500271000,"updatedTime":1682500271000,"contributors":[{"name":"oragekk","email":"oragekk@163.com","commits":1}]},"readingTime":{"minutes":13.86,"words":4159},"filePathRelative":"posts/cross-platform/Flutter/concurrency.md","localizedDate":"2023年4月26日","excerpt":"<p>Dart 通过 async-await、isolate 以及一些异步类型概念（例如 <code>Future</code> 和 <code>Stream</code>）支持了并发代码编程。本篇文章会对 async-await、<code>Future</code> 和 <code>Stream</code> 进行简略的介绍，而侧重点放在 isolate 的讲解上。</p>\\n<p>在应用中，所有的 Dart 代码都在 <strong>isolate</strong> 中运行。每一个 Dart 的 isolate 都有独立的运行线程，它们无法与其他 isolate 共享可变对象。在需要进行通信的场景里，isolate 会使用消息机制。很多 Dart 应用都只使用一个 isolate，也就是 main isolate。你可以创建额外的 isolate 以便在多个处理器核心上执行并行代码。</p>","autoDesc":true}`);export{p as comp,c as data};
